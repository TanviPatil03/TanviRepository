package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

\\ packages imported from ftc 



@TeleOp(name="TeleOp", group="group")

public class New_TeleOp extends LinearOpMode{ \\ class name is New_TeleOp

    public static HardwarePushBot robot = new HardwarePushBot();
    public static ElapsedTime runTime = new ElapsedTime();

    @Override
    public void runOpMode() throws InterruptedException {

        robot.init(hardwareMap);\\ intialization

        telemetry.addData("Status", "Initialized");\\ telemetry will keep track of time, u can set it to tell how much time is left also
        telemetry.addData("Hello Driver", "Press Play Button");\\ this message will show up on the phone
        telemetry.update();

        waitForStart();
        while (opModeIsActive()) {

            double RIGHTPOW = -gamepad1.right_stick_y * 0.8;\\ game pad is the controllers
            double LEFTPOW = -gamepad1.left_stick_y * 0.8;
            double REVERSE_THRES = -0.5;
            double FORWARD_THRES = 0.5;
            double drive_Speed = 0.6;
            double turn_Speed = 0.4;\
            \\ referring to robot controls of wheel

            double LIFTPOW = -gamepad2.left_stick_y;
            double UP_THRES = 0.5;
            double DOWN_THRES = -0.5;

            
            if(RIGHTPOW < FORWARD_THRES && RIGHTPOW > REVERSE_THRES && LEFTPOW < FORWARD_THRES && LEFTPOW > REVERSE_THRES){
                DriveMethods.stopRightMotors();
                DriveMethods.stopLeftMotors();
            }else if(RIGHTPOW != 0.0 && LEFTPOW != 0.0) {
                DriveMethods.driveRight(RIGHTPOW * drive_Speed);
                DriveMethods.driveLeft(LEFTPOW * drive_Speed);
            }else if(RIGHTPOW != 0.0 && LEFTPOW == 0.0){
                DriveMethods.driveRight(RIGHTPOW * drive_Speed);
            }else if(LEFTPOW != 0.0 && RIGHTPOW == 0.0) {
                DriveMethods.driveLeft(LEFTPOW * drive_Speed);
            }else if(RIGHTPOW < REVERSE_THRES && LEFTPOW > FORWARD_THRES){
                DriveMethods.driveLeft(LEFTPOW * turn_Speed);
                DriveMethods.driveRight(RIGHTPOW * turn_Speed);
            }else if(RIGHTPOW > FORWARD_THRES && LEFTPOW < REVERSE_THRES){
                DriveMethods.driveLeft(LEFTPOW * turn_Speed);
                DriveMethods.driveRight(RIGHTPOW * turn_Speed);
                \\ if statements using data type boolean, in which if this is true it will do something, but if it is false it will do something else
            }

            if(LIFTPOW < UP_THRES && LIFTPOW > DOWN_THRES) {\\ lift power of the vertical movement of the lift
                DriveMethods.glyphLift(0);

            }else if(LIFTPOW > UP_THRES){
                DriveMethods.glyphLift(-LIFTPOW * -0.5);

            }else{
                DriveMethods.glyphLift(LIFTPOW * 0.5);
            }

            if(gamepad2.b) {
                DriveMethods.openGlyph(); \\ gamepad1 refers to wheels, where as gamepad2 refers to attachments, for example glyph lift
            }
            if(gamepad2.a){
                DriveMethods.closeGlyph();
            }

            telemetry.addData("Status", "Run Time: " + runTime.toString());
            telemetry.addData("Motors", "power (%.2f)"); \\ telemtry deals with time and the tracking of it
            telemetry.update();
        }
    }
